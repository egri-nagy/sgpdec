<?xml version="1.0" encoding="utf-8"?>
<#GAPDoc Label="BuildByWord">
<ManSection>
  <Oper Arg="word, generators, start, action" Name="BuildByWord" />
  <Oper Arg="word, generators, start, action" Name="TrajectoryByWord" />
  <Description>
General purpose function for constructing some structure by applying generators
in the order coded defined by a sequence of integers (words).
The construction starts at the given element, and the action should be a
function describing how the generators act on the starting and the subsequent
points. For an empty word the starting point is returned.
<C>TrajectoryByWord</C> is the same but it returns the whole calculation,
not just the final result.
<P></P>
These functions can be considered to be the generalizations of <Package>Citrus'
</Package> <Code>EvaluateWord</Code>.
<P></P>
Calculating a transformation represented by a word:
<Example>
gap> gens := [Transformation([2,3,4,1]),
> Transformation([2,1,3,4]),
> Transformation([1,1,3,4])];;
gap> BuildByWord([1,2,1,2,3],gens,IdentityTransformation(4),\*);
Transformation( [ 1, 4, 1, 3 ] )
</Example>
    Or acting on some set:
    <Example>
gap> BuildByWord([1,2,1,2,3],gens,[1,2],OnSets);
[ 1, 4 ]
</Example>
    The next archetypical programming example demonstrates the flexibility of
these functions:
    <Example>
gap> BuildByWord([3,5,9,9,4,6,2,4,8,9,7,1],
> ["!","W","H","o","e"," ","d","r","l"],
> "",
> Concatenation);
"Hello World!"
</Example>
    Or we can have the intermediate elements of the construction.
    <Example>
gap> TrajectoryByWord([3,2,1],["c","b","a"],"",Concatenation);
[ "", "a", "ab", "abc" ]
</Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsStraightWord">
<ManSection >
  <Oper Arg="word, gens, start, action" Name="IsStraightWord" />
  <Description>
Returns true if the word generates a trajectory that is straight starting
from the given point, i.e. there are no repeated visited nodes.
<Example>
gap> w := [1,2,1,2,1,2,1,2];
[ 1, 2, 1, 2, 1, 2, 1, 2 ]
gap> TrajectoryByWord(w, [(1,2),(1,2,3)],(),\*);
[ (), (1,2), (1,3), (1,3,2), (), (1,2), (1,3), (1,3,2), () ]
gap> IsStraightWord(w, [(1,2),(1,2,3)],(),\*);
false
</Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="Reduce2StraightWord">
<ManSection >
  <Func Arg="word, gens, start, action" Name="Reduce2StraightWord" />
  <Description>
Returns the straight word yielded by the reduction (cutting out identities
and repetitions). The algorithm takes the trajectory and compares the elements
from the beginning and from the end.
<Example>
gap> w := [1,2,1,2,1,2,1,2];
[ 1, 2, 1, 2, 1, 2, 1, 2 ]
gap> rw := Reduce2StraightWord(w, [(1,2),(1,2,3)],(),\*);
[ 1, 2, 1, 2 ]
gap> TrajectoryByWord(rw, [(1,2),(1,2,3)],(),\*);
[ (), (1,2), (1,3), (1,3,2), () ]
gap> IsStraightWord(rw, [(1,2),(1,2,3)],(),\*);
true
</Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="StraightWords">
<ManSection >
  <Func Arg="start, gens, action, processor, limit" Name="StraightWords" />
  <Description>
Starting from given point <C>start</C> the backtrack search systematically
applies the generators <C>gens</C> by the given <C>action</C>. Then the
corresponding words of symbols from <C>1</C> to <C>Size(gens)</C> is tested
for straightness. If a straight word is found then the <C>processor</C>
is called to process the result (the straight word and the point it constrcuts).
The actual behaviour of this search is determined by these SWPs (straight word
processors, see examples below).
The backtrack search can in the worst case visit all the <M>m^n</M> possible
words with <M>m</M> generators and length <M>n</M>.
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="SWP_Printer">
<ManSection >
  <Func Arg="word, result" Name="SWP_Printer" />
  <Description>
This prints straight words and resulting points when plugged into
<Ref Func="StraightWords"/>.
<Example>
gap> StraightWords((),[(1,2),(1,2,3,4)],\*,SWP_Printer,3);
():[  ]
(1,2):[ 1 ]
():[ 1, 1 ]
(1,3,4):[ 1, 2 ]
(1,3,4,2):[ 1, 2, 1 ]
(1,4,2,3):[ 1, 2, 2 ]
(1,2,3,4):[ 2 ]
(2,3,4):[ 2, 1 ]
(1,2,4,3):[ 2, 1, 2 ]
(1,3)(2,4):[ 2, 2 ]
(1,3,2,4):[ 2, 2, 1 ]
(1,4,3,2):[ 2, 2, 2 ]
</Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="SWP_SimpleCollector">
<ManSection >
  <Func Arg="list" Name="SWP_SimpleCollector" />
  <Description>
This function returns a function that collects straight words when plugged into
<Ref Func="StraightWords"/>.
<Example>
gap> l := [];
[  ]
gap> StraightWords((),[(1,2),(1,2,3,4)],\*,SWP_SimpleCollector(l),3);
gap> l;
[ [  ], [ 1 ], [ 1, 1 ], [ 1, 2 ], [ 1, 2, 1 ], [ 1, 2, 2 ], [ 2 ], [ 2, 1 ], 
  [ 2, 1, 2 ], [ 2, 2 ], [ 2, 2, 1 ], [ 2, 2, 2 ] ]
</Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="SWP_WordPointPairCollector">
<ManSection >
  <Func Arg="list" Name="SWP_WordPointPairCollector" />
  <Description>
This function returns a function that collects straight words and the
corresponding point when plugged into
<Ref Func="StraightWords"/>.
<Example>
gap> l := [];
[  ]
gap> StraightWords((),[(1,2),(1,2,3,4)],\*,SWP_WordPointPairCollector(l),3);
gap> l;
[ [ [  ], () ], [ [ 1 ], (1,2) ], [ [ 1, 1 ], () ], [ [ 1, 2 ], (1,3,4) ], 
  [ [ 1, 2, 1 ], (1,3,4,2) ], [ [ 1, 2, 2 ], (1,4,2,3) ], 
  [ [ 2 ], (1,2,3,4) ], [ [ 2, 1 ], (2,3,4) ], [ [ 2, 1, 2 ], (1,2,4,3) ], 
  [ [ 2, 2 ], (1,3)(2,4) ], [ [ 2, 2, 1 ], (1,3,2,4) ], 
  [ [ 2, 2, 2 ], (1,4,3,2) ] ]
</Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="SWP_Search">
<ManSection >
  <Func Arg="list, point" Name="SWP_Search" />
  <Description>
This function returns a function that collects straight realizing only the
given point when plugged into
<Ref Func="StraightWords"/>.
<Example>
gap> l := [];
[  ]
gap> StraightWords((),[(1,2),(1,2,3,4)],\*,SWP_Search(l,(2,3,4)),6);
gap> l;
[ [ 2, 1 ], [ 2, 2, 1, 2, 1, 2 ] ]
</Example>
  </Description>
</ManSection>
<#/GAPDoc>