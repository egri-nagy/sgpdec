<#GAPDoc Label="LagrangeDecomposition">
<ManSection><Heading>Lagrange Decomposition</Heading>
<Oper Name="LagrangeDecomposition" Arg="permgroup"/>
<Oper Name="LagrangeDecomposition" Arg="permgroup, subgroupchain"/>
<Description>
  <C>LagrangeDecomposition</C> constructs a hierarchical decomposition for a permutation 
  group based on a chain of subgroups of G. 
  If the chain is not specified, &GAP;'s <C>ChiefSeries</C> is used to calculate the chain.
  <Example>
gap> S4:=SymmetricGroup(IsPermGroup,4);
Sym( [ 1 .. 4 ] )
gap> ld := LagrangeDecomposition(S4);
Lagrange decomposition of:S4
G_C2_C3_C2 x C2
gap> ld := LagrangeDecomposition(S4,CompositionSeries(S4));
Lagrange decomposition of:S4
G_C2_C3_C2_C2
</Example>
</Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="LevelKillers">
<ManSection><Heading>Killing coordinates</Heading>
<Func Name="LevelKillers" Arg="decomp, cascadedstate"/>
<Description>
<C>LevelKillers</C> returns a list of permutation, one for each level.
Lifted to the decomposition and applied top-down (i.e. from index 1 to n)
it transforms the coordinate value to
the base value 1.
<Example>
gap> D12 := DihedralGroup(IsPermGroup,12);
Group([ (1,2,3,4,5,6), (2,6)(3,5) ])
gap> ld := LagrangeDecomposition(D12);
Lagrange decomposition of:D12
G_C2_C2_C3
gap> LevelKillers(ld,[2,1,3]);
[ (2,6)(3,5), (), (1,5,3)(2,6,4) ]
</Example>
</Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="LagrangeAccess">
<ManSection><Heading>Accessing Lagrange decomposition internals</Heading>
<Func Name="SeriesOf" Arg="lagrangedecomp"/>
<Func Name="TransversalsOf" Arg="lagrangedecomp"/>
<Description>
Access to the underlying series, and for each level to the transversals
in a Lagrange decomposition.
<Example>
gap> D60 := DihedralGroup(IsPermGroup,60);
Group([ (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,
    27,28,29,30), (2,30)(3,29)(4,28)(5,27)(6,26)(7,25)(8,24)(9,23)(10,22)(11,
    21)(12,20)(13,19)(14,18)(15,17) ])
gap> ld := LagrangeDecomposition(D60);
Lagrange decomposition of:D60
G_C2_C2_C3_C5
gap> SeriesOf(ld);
[ D60, C30, C15, C5, 1 ]
gap> TransversalsOf(ld);
[ RightTransversal(D60,C30), RightTransversal(C30,C15), 
  RightTransversal(C15,C5), &lt;enumerator of perm group&gt; ]
</Example>
</Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="LagrangeIsomorphism">
<ManSection><Heading>Isomorphism of the original group and the cascade product</Heading>
<Oper Name="AsPoint" Arg="cascadedstate, lagrangedecomp"/>
<Oper Name="AsCoords" Arg="point, lagrangedecomp"/>
<Oper Name="AsPermutation" Arg="cascadedtrans, lagrangedecomp"/>
<Oper Name="AsCascadedTrans" Arg="permutation, lagrangedecomp"/>
<Description>
These are the operations to move between the original and the cascaded
product produced by the decomposition algorithm.
<Example>
gap> C24 := CyclicGroup(IsPermGroup,24);
Group([ (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24) ])
gap> ld := LagrangeDecomposition(C24);
Lagrange decomposition of:C24
G_C2_C2_C2_C3
gap> AsPoint([1,2,1,3],ld);
7
gap> AsCoords(7,ld);
[ 1, 2, 1, 3 ]
gap> g := AsList(C24)[5];
(1,5,9,13,17,21)(2,6,10,14,18,22)(3,7,11,15,19,23)(4,8,12,16,20,24)
gap> AsCascadedTrans(g,ld);
Cascaded transformation in G_C2_C2_C2_C3
gap> ct := AsCascadedTrans(g,ld);
Cascaded transformation in G_C2_C2_C2_C3
gap> AsPermutation(ct,ld);
(1,5,9,13,17,21)(2,6,10,14,18,22)(3,7,11,15,19,23)(4,8,12,16,20,24)
</Example>
</Description>
</ManSection>
<#/GAPDoc>
