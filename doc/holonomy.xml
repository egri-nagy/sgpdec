<#GAPDoc Label="HolonomyDecomposition">
<ManSection><Heading>Holonomy Decomposition</Heading>
<Oper Name="HolonomyDecomposition" Arg="ts"/>
<Oper Name="HolonomyDecomposition" Arg="skeleton"/>
<Description>
  <C>HolonomyDecomposition</C> constructs a hierarchical decomposition for a
  transformation semigroup or for a skeleton if there is already one calculated.
<Example>
gap> S := Semigroup([Transformation([2,1,3,5,4,3]),Transformation([6,3,1,6,5,4])]);
&lt;semigroup with 2 generators&gt;
gap> hd := HolonomyDecomposition(S);
&lt;holonomy decomposition of &lt;semigroup with 2 gens&gt;&gt;
gap> Size(hd);
5
gap> Display(hd);
1: 2
2: (2,C2) 3
3: (3,C2)
4: (3,S3)
5: (2,C2)
</Example>
For displaying the holonomy decomposition the components for a hierarchical
level are displayed on a line, the parallel components separated by a space
instead of <M>\times</M> for readability. If the component is a trivial
group then only the number of points to act on is displayed. If the there is
a nontrivial group acting, then we indicate the group and the number of points
it acts on, but we do not indicate the constant maps, as they are always there.
</Description>
</ManSection>
<#/GAPDoc>


#############################################################################
 <#GAPDoc Label="SkeletonOf">
 <ManSection><Heading>Underlying skeleton</Heading>
 <Func Name="SkeletonOf" Arg="holdecomp"/>
 <Description>
 Returns the underlying <C>Skeleton</C> of the given holonomy decomposition.
 <Example>
gap> SkeletonOf(hd);
Skeleton of  &lt;trans. semigroup of size 3125 with 4 generators&gt;,
image sets: 31, equivalence classes: 5, levels: 4
 </Example> 
 </Description>
 </ManSection>
 <#/GAPDoc>

#############################################################################
 <#GAPDoc Label="GroupComponents">
 <ManSection><Heading>The group components</Heading>
 <Func Name="GroupComponents" Arg="holdecomp, depth"/>
 <Description>
 Returns the list of (parallel) group components on the given depth of a holonomy decomposition. 
 <Example>
 </Example> 
 </Description>
 </ManSection>
 <#/GAPDoc>

#############################################################################
 <#GAPDoc Label="Coordinates">
 <ManSection><Heading>Cover Chains and Coordinates</Heading>
 <Func Name="Coordinates" Arg="holdecomp, coverchain"/>
 <Func Name="CoverChain" Arg="holdecomp, coordinates"/>
 <Description>
 Lift for states are essentially cover (inclusion) chains to a singleton from the full state set, but 
they have to be encoded with respect to representative elements. These function convert back and forth.
 </Description>
 </ManSection>
 <#/GAPDoc>

#############################################################################
 <#GAPDoc Label="ActionInfoOnLevel">
 <ManSection><Heading>Information on the action of a component on a level</Heading>
 <Func Name="ActionInfoOnLevel" Arg="holdecomp, level"/>
 <Description>
 This gives textual information on the action of the components on a given level.
 </Description>
 </ManSection>
 <#/GAPDoc>
